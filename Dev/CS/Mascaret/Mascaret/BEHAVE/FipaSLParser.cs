//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 FipaSL.g 2013-12-24 10:18:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using System;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
//[System.CLSCompliant(false)]
public partial class FipaSLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACTION", "ALPHA", "AND", "ANYCHAR", "BELIEF", "COLON", "DIESE", "DIGIT", "DONE", "DOT", "EQUAL", "FALSE_T", "FEASIBLE", "GUILL", "LPAREN", "NOT", "NUMBER", "OR", "QUESTION", "RESULT", "RPAREN", "SEQUENCE", "SET", "STARTED", "TRUE_T", "WHITESPACE"
	};
	public const int EOF=-1;
	public const int ACTION=4;
	public const int ALPHA=5;
	public const int AND=6;
	public const int ANYCHAR=7;
	public const int BELIEF=8;
	public const int COLON=9;
	public const int DIESE=10;
	public const int DIGIT=11;
	public const int DONE=12;
	public const int DOT=13;
	public const int EQUAL=14;
	public const int FALSE_T=15;
	public const int FEASIBLE=16;
	public const int GUILL=17;
	public const int LPAREN=18;
	public const int NOT=19;
	public const int NUMBER=20;
	public const int OR=21;
	public const int QUESTION=22;
	public const int RESULT=23;
	public const int RPAREN=24;
	public const int SEQUENCE=25;
	public const int SET=26;
	public const int STARTED=27;
	public const int TRUE_T=28;
	public const int WHITESPACE=29;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, false, false, false, false, false, false, false, false, false, 
			false, true, false, true, true, false, true, 
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public FipaSLParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public FipaSLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return FipaSLParser.tokenNames; } }
	public override string GrammarFileName { get { return "FipaSL.g"; } }



	    public bool isAction = false;
	    public bool done = false;
	    public bool started = false;

	    public string value = "";

	    public string performer = "";
	    public string entityName = "";
	    public string actionName = "";
	    public string variable = "";

	    public List<string> paramValue = new List<string>();
	    public List<string> paramName = new List<string>();

	    public void parse() {
	            content();
	    }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_content() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_content() {}
	// $ANTLR start "content"
	// FipaSL.g:45:1: content : LPAREN ( contentexpression )+ RPAREN ;
	[GrammarRule("content")]
	private void content()
	{
		EnterRule_content();
		EnterRule("content", 1);
		TraceIn("content", 1);
	    ParserRuleReturnScope<IToken> contentexpression1 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "content");
		DebugLocation(45, 111);
		try
		{
			// FipaSL.g:45:9: ( LPAREN ( contentexpression )+ RPAREN )
			DebugEnterAlt(1);
			// FipaSL.g:45:11: LPAREN ( contentexpression )+ RPAREN
			{
			DebugLocation(45, 11);
			Match(input,LPAREN,Follow._LPAREN_in_content170); if (state.failed) return;
			DebugLocation(45, 18);
			// FipaSL.g:45:18: ( contentexpression )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==ALPHA||LA1_1==FALSE_T||LA1_1==LPAREN||LA1_1==TRUE_T))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:45:18: contentexpression
					{
					DebugLocation(45, 18);
					PushFollow(Follow._contentexpression_in_content172);
					contentexpression1=contentexpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(45, 37);
			if (state.backtracking == 0)
			{
				Console.WriteLine("CONTENTEXPRESSION : "+(contentexpression1!=null?input.ToString(contentexpression1.Start,contentexpression1.Stop):default(string)));
			}
			DebugLocation(45, 105);
			Match(input,RPAREN,Follow._RPAREN_in_content176); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("content", 1);
			LeaveRule("content", 1);
			LeaveRule_content();
	    }
	 	DebugLocation(45, 111);
		} finally { DebugExitRule(GrammarFileName, "content"); }
		return;

	}
	// $ANTLR end "content"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_contentexpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_contentexpression() {}
	// $ANTLR start "contentexpression"
	// FipaSL.g:47:1: contentexpression : ( actionexpression | proposition );
	[GrammarRule("contentexpression")]
	private ParserRuleReturnScope<IToken> contentexpression()
	{
		EnterRule_contentexpression();
		EnterRule("contentexpression", 2);
		TraceIn("contentexpression", 2);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

	    ParserRuleReturnScope<IToken> actionexpression2 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "contentexpression");
		DebugLocation(47, 31);
		try
		{
			// FipaSL.g:47:19: ( actionexpression | proposition )
			int alt2=2;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_1 = input.LA(1);

			if ((LA2_1==LPAREN))
			{
				int LA2_2 = input.LA(2);

				if ((LA2_2==ACTION))
				{
					alt2 = 1;
				}
				else if (((LA2_2>=ALPHA && LA2_2<=AND)||LA2_2==DONE||LA2_2==EQUAL||LA2_2==FEASIBLE||LA2_2==NOT||LA2_2==OR||LA2_2==RESULT||LA2_2==STARTED))
				{
					alt2 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

			}
			else if ((LA2_1==ALPHA||LA2_1==FALSE_T||LA2_1==TRUE_T))
			{
				alt2 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:47:21: actionexpression
				{
				DebugLocation(47, 21);
				PushFollow(Follow._actionexpression_in_contentexpression185);
				actionexpression2=actionexpression();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(47, 38);
				if (state.backtracking == 0)
				{
					Console.WriteLine("ACTIONEXPRESSION : "+(actionexpression2!=null?input.ToString(actionexpression2.Start,actionexpression2.Stop):default(string)));
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:48:21: proposition
				{
				DebugLocation(48, 21);
				PushFollow(Follow._proposition_in_contentexpression209);
				proposition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contentexpression", 2);
			LeaveRule("contentexpression", 2);
			LeaveRule_contentexpression();
	    }
	 	DebugLocation(48, 31);
		} finally { DebugExitRule(GrammarFileName, "contentexpression"); }
		return retval;

	}
	// $ANTLR end "contentexpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_proposition() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_proposition() {}
	// $ANTLR start "proposition"
	// FipaSL.g:50:1: proposition : wff ;
	[GrammarRule("proposition")]
	private void proposition()
	{
		EnterRule_proposition();
		EnterRule("proposition", 3);
		TraceIn("proposition", 3);
		try { DebugEnterRule(GrammarFileName, "proposition");
		DebugLocation(50, 17);
		try
		{
			// FipaSL.g:50:13: ( wff )
			DebugEnterAlt(1);
			// FipaSL.g:50:15: wff
			{
			DebugLocation(50, 15);
			PushFollow(Follow._wff_in_proposition217);
			wff();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("proposition", 3);
			LeaveRule("proposition", 3);
			LeaveRule_proposition();
	    }
	 	DebugLocation(50, 17);
		} finally { DebugExitRule(GrammarFileName, "proposition"); }
		return;

	}
	// $ANTLR end "proposition"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_wff() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_wff() {}
	// $ANTLR start "wff"
	// FipaSL.g:52:1: wff : ( LPAREN unarylogicalop WHITESPACE wff RPAREN | LPAREN binarylogicalop WHITESPACE wff WHITESPACE wff RPAREN | LPAREN actionop WHITESPACE actionexpression RPAREN | atomicformula );
	[GrammarRule("wff")]
	private void wff()
	{
		EnterRule_wff();
		EnterRule("wff", 4);
		TraceIn("wff", 4);
		try { DebugEnterRule(GrammarFileName, "wff");
		DebugLocation(52, 19);
		try
		{
			// FipaSL.g:52:5: ( LPAREN unarylogicalop WHITESPACE wff RPAREN | LPAREN binarylogicalop WHITESPACE wff WHITESPACE wff RPAREN | LPAREN actionop WHITESPACE actionexpression RPAREN | atomicformula )
			int alt3=4;
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_1 = input.LA(1);

			if ((LA3_1==LPAREN))
			{
				switch (input.LA(2))
				{
				case NOT:
					{
					alt3 = 1;
					}
					break;
				case AND:
				case OR:
					{
					alt3 = 2;
					}
					break;
				case DONE:
				case FEASIBLE:
				case STARTED:
					{
					alt3 = 3;
					}
					break;
				case ALPHA:
				case EQUAL:
				case RESULT:
					{
					alt3 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 3, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA3_1==ALPHA||LA3_1==FALSE_T||LA3_1==TRUE_T))
			{
				alt3 = 4;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:52:7: LPAREN unarylogicalop WHITESPACE wff RPAREN
				{
				DebugLocation(52, 7);
				Match(input,LPAREN,Follow._LPAREN_in_wff225); if (state.failed) return;
				DebugLocation(52, 14);
				PushFollow(Follow._unarylogicalop_in_wff227);
				unarylogicalop();
				PopFollow();
				if (state.failed) return;
				DebugLocation(52, 29);
				Match(input,WHITESPACE,Follow._WHITESPACE_in_wff229); if (state.failed) return;
				DebugLocation(52, 41);
				PushFollow(Follow._wff_in_wff232);
				wff();
				PopFollow();
				if (state.failed) return;
				DebugLocation(52, 46);
				Match(input,RPAREN,Follow._RPAREN_in_wff235); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:53:7: LPAREN binarylogicalop WHITESPACE wff WHITESPACE wff RPAREN
				{
				DebugLocation(53, 7);
				Match(input,LPAREN,Follow._LPAREN_in_wff243); if (state.failed) return;
				DebugLocation(53, 14);
				PushFollow(Follow._binarylogicalop_in_wff245);
				binarylogicalop();
				PopFollow();
				if (state.failed) return;
				DebugLocation(53, 30);
				Match(input,WHITESPACE,Follow._WHITESPACE_in_wff247); if (state.failed) return;
				DebugLocation(53, 41);
				PushFollow(Follow._wff_in_wff249);
				wff();
				PopFollow();
				if (state.failed) return;
				DebugLocation(53, 45);
				Match(input,WHITESPACE,Follow._WHITESPACE_in_wff251); if (state.failed) return;
				DebugLocation(53, 56);
				PushFollow(Follow._wff_in_wff253);
				wff();
				PopFollow();
				if (state.failed) return;
				DebugLocation(53, 60);
				Match(input,RPAREN,Follow._RPAREN_in_wff255); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FipaSL.g:54:7: LPAREN actionop WHITESPACE actionexpression RPAREN
				{
				DebugLocation(54, 7);
				Match(input,LPAREN,Follow._LPAREN_in_wff263); if (state.failed) return;
				DebugLocation(54, 14);
				PushFollow(Follow._actionop_in_wff265);
				actionop();
				PopFollow();
				if (state.failed) return;
				DebugLocation(54, 23);
				Match(input,WHITESPACE,Follow._WHITESPACE_in_wff267); if (state.failed) return;
				DebugLocation(54, 34);
				PushFollow(Follow._actionexpression_in_wff269);
				actionexpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(54, 51);
				Match(input,RPAREN,Follow._RPAREN_in_wff271); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FipaSL.g:55:7: atomicformula
				{
				DebugLocation(55, 7);
				PushFollow(Follow._atomicformula_in_wff279);
				atomicformula();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("wff", 4);
			LeaveRule("wff", 4);
			LeaveRule_wff();
	    }
	 	DebugLocation(55, 19);
		} finally { DebugExitRule(GrammarFileName, "wff"); }
		return;

	}
	// $ANTLR end "wff"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unarylogicalop() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unarylogicalop() {}
	// $ANTLR start "unarylogicalop"
	// FipaSL.g:58:1: unarylogicalop : NOT ;
	[GrammarRule("unarylogicalop")]
	private void unarylogicalop()
	{
		EnterRule_unarylogicalop();
		EnterRule("unarylogicalop", 5);
		TraceIn("unarylogicalop", 5);
		try { DebugEnterRule(GrammarFileName, "unarylogicalop");
		DebugLocation(58, 20);
		try
		{
			// FipaSL.g:58:16: ( NOT )
			DebugEnterAlt(1);
			// FipaSL.g:58:18: NOT
			{
			DebugLocation(58, 18);
			Match(input,NOT,Follow._NOT_in_unarylogicalop288); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unarylogicalop", 5);
			LeaveRule("unarylogicalop", 5);
			LeaveRule_unarylogicalop();
	    }
	 	DebugLocation(58, 20);
		} finally { DebugExitRule(GrammarFileName, "unarylogicalop"); }
		return;

	}
	// $ANTLR end "unarylogicalop"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_binarylogicalop() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_binarylogicalop() {}
	// $ANTLR start "binarylogicalop"
	// FipaSL.g:60:1: binarylogicalop : ( AND | OR );
	[GrammarRule("binarylogicalop")]
	private void binarylogicalop()
	{
		EnterRule_binarylogicalop();
		EnterRule("binarylogicalop", 6);
		TraceIn("binarylogicalop", 6);
		try { DebugEnterRule(GrammarFileName, "binarylogicalop");
		DebugLocation(60, 20);
		try
		{
			// FipaSL.g:60:17: ( AND | OR )
			DebugEnterAlt(1);
			// FipaSL.g:
			{
			DebugLocation(60, 17);
			if (input.LA(1)==AND||input.LA(1)==OR)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("binarylogicalop", 6);
			LeaveRule("binarylogicalop", 6);
			LeaveRule_binarylogicalop();
	    }
	 	DebugLocation(61, 20);
		} finally { DebugExitRule(GrammarFileName, "binarylogicalop"); }
		return;

	}
	// $ANTLR end "binarylogicalop"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_atomicformula() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_atomicformula() {}
	// $ANTLR start "atomicformula"
	// FipaSL.g:63:1: atomicformula : ( FALSE_T | TRUE_T | LPAREN binarytermop term WHITESPACE term RPAREN | LPAREN predicatesymbol WHITESPACE ( term )+ RPAREN | propositionsymbol );
	[GrammarRule("atomicformula")]
	private void atomicformula()
	{
		EnterRule_atomicformula();
		EnterRule("atomicformula", 7);
		TraceIn("atomicformula", 7);
		try { DebugEnterRule(GrammarFileName, "atomicformula");
		DebugLocation(63, 33);
		try
		{
			// FipaSL.g:63:15: ( FALSE_T | TRUE_T | LPAREN binarytermop term WHITESPACE term RPAREN | LPAREN predicatesymbol WHITESPACE ( term )+ RPAREN | propositionsymbol )
			int alt5=5;
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			switch (input.LA(1))
			{
			case FALSE_T:
				{
				alt5 = 1;
				}
				break;
			case TRUE_T:
				{
				alt5 = 2;
				}
				break;
			case LPAREN:
				{
				int LA5_2 = input.LA(2);

				if ((LA5_2==EQUAL||LA5_2==RESULT))
				{
					alt5 = 3;
				}
				else if ((LA5_2==ALPHA))
				{
					alt5 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 5, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case ALPHA:
				{
				alt5 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:63:17: FALSE_T
				{
				DebugLocation(63, 17);
				Match(input,FALSE_T,Follow._FALSE_T_in_atomicformula324); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:64:17: TRUE_T
				{
				DebugLocation(64, 17);
				Match(input,TRUE_T,Follow._TRUE_T_in_atomicformula342); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FipaSL.g:65:17: LPAREN binarytermop term WHITESPACE term RPAREN
				{
				DebugLocation(65, 17);
				Match(input,LPAREN,Follow._LPAREN_in_atomicformula360); if (state.failed) return;
				DebugLocation(65, 24);
				PushFollow(Follow._binarytermop_in_atomicformula362);
				binarytermop();
				PopFollow();
				if (state.failed) return;
				DebugLocation(65, 37);
				PushFollow(Follow._term_in_atomicformula364);
				term();
				PopFollow();
				if (state.failed) return;
				DebugLocation(65, 42);
				Match(input,WHITESPACE,Follow._WHITESPACE_in_atomicformula366); if (state.failed) return;
				DebugLocation(65, 53);
				PushFollow(Follow._term_in_atomicformula368);
				term();
				PopFollow();
				if (state.failed) return;
				DebugLocation(65, 58);
				Match(input,RPAREN,Follow._RPAREN_in_atomicformula370); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FipaSL.g:66:17: LPAREN predicatesymbol WHITESPACE ( term )+ RPAREN
				{
				DebugLocation(66, 17);
				Match(input,LPAREN,Follow._LPAREN_in_atomicformula388); if (state.failed) return;
				DebugLocation(66, 24);
				PushFollow(Follow._predicatesymbol_in_atomicformula390);
				predicatesymbol();
				PopFollow();
				if (state.failed) return;
				DebugLocation(66, 40);
				Match(input,WHITESPACE,Follow._WHITESPACE_in_atomicformula392); if (state.failed) return;
				DebugLocation(66, 51);
				// FipaSL.g:66:51: ( term )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_1 = input.LA(1);

					if ((LA4_1==ALPHA||LA4_1==DIGIT||LA4_1==LPAREN||LA4_1==QUESTION))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// FipaSL.g:66:51: term
						{
						DebugLocation(66, 51);
						PushFollow(Follow._term_in_atomicformula394);
						term();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(66, 57);
				Match(input,RPAREN,Follow._RPAREN_in_atomicformula397); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FipaSL.g:67:17: propositionsymbol
				{
				DebugLocation(67, 17);
				PushFollow(Follow._propositionsymbol_in_atomicformula415);
				propositionsymbol();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atomicformula", 7);
			LeaveRule("atomicformula", 7);
			LeaveRule_atomicformula();
	    }
	 	DebugLocation(67, 33);
		} finally { DebugExitRule(GrammarFileName, "atomicformula"); }
		return;

	}
	// $ANTLR end "atomicformula"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_binarytermop() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_binarytermop() {}
	// $ANTLR start "binarytermop"
	// FipaSL.g:69:1: binarytermop : ( RESULT | EQUAL );
	[GrammarRule("binarytermop")]
	private void binarytermop()
	{
		EnterRule_binarytermop();
		EnterRule("binarytermop", 8);
		TraceIn("binarytermop", 8);
		try { DebugEnterRule(GrammarFileName, "binarytermop");
		DebugLocation(69, 21);
		try
		{
			// FipaSL.g:69:15: ( RESULT | EQUAL )
			DebugEnterAlt(1);
			// FipaSL.g:
			{
			DebugLocation(69, 15);
			if (input.LA(1)==EQUAL||input.LA(1)==RESULT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("binarytermop", 8);
			LeaveRule("binarytermop", 8);
			LeaveRule_binarytermop();
	    }
	 	DebugLocation(70, 21);
		} finally { DebugExitRule(GrammarFileName, "binarytermop"); }
		return;

	}
	// $ANTLR end "binarytermop"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actionop() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actionop() {}
	// $ANTLR start "actionop"
	// FipaSL.g:72:1: actionop : ( DONE | FEASIBLE | STARTED );
	[GrammarRule("actionop")]
	private void actionop()
	{
		EnterRule_actionop();
		EnterRule("actionop", 9);
		TraceIn("actionop", 9);
		try { DebugEnterRule(GrammarFileName, "actionop");
		DebugLocation(72, 36);
		try
		{
			// FipaSL.g:72:10: ( DONE | FEASIBLE | STARTED )
			int alt6=3;
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			switch (input.LA(1))
			{
			case DONE:
				{
				alt6 = 1;
				}
				break;
			case FEASIBLE:
				{
				alt6 = 2;
				}
				break;
			case STARTED:
				{
				alt6 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:72:12: DONE
				{
				DebugLocation(72, 12);
				Match(input,DONE,Follow._DONE_in_actionop450); if (state.failed) return;
				DebugLocation(72, 17);
				if (state.backtracking == 0)
				{
					done = true;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:73:12: FEASIBLE
				{
				DebugLocation(73, 12);
				Match(input,FEASIBLE,Follow._FEASIBLE_in_actionop465); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FipaSL.g:74:12: STARTED
				{
				DebugLocation(74, 12);
				Match(input,STARTED,Follow._STARTED_in_actionop478); if (state.failed) return;
				DebugLocation(74, 20);
				if (state.backtracking == 0)
				{
					started = true;
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("actionop", 9);
			LeaveRule("actionop", 9);
			LeaveRule_actionop();
	    }
	 	DebugLocation(74, 36);
		} finally { DebugExitRule(GrammarFileName, "actionop"); }
		return;

	}
	// $ANTLR end "actionop"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}
	// $ANTLR start "term"
	// FipaSL.g:76:1: term : ( constant | set | sequence | functionalterm | actionexpression | variableidentifier );
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 10);
		TraceIn("term", 10);
	    ParserRuleReturnScope<IToken> constant3 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(76, 25);
		try
		{
			// FipaSL.g:76:6: ( constant | set | sequence | functionalterm | actionexpression | variableidentifier )
			int alt7=6;
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			switch (input.LA(1))
			{
			case ALPHA:
			case DIGIT:
				{
				alt7 = 1;
				}
				break;
			case LPAREN:
				{
				switch (input.LA(2))
				{
				case SET:
					{
					alt7 = 2;
					}
					break;
				case SEQUENCE:
					{
					alt7 = 3;
					}
					break;
				case ACTION:
					{
					alt7 = 5;
					}
					break;
				case ALPHA:
					{
					alt7 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case QUESTION:
				{
				alt7 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:76:8: constant
				{
				DebugLocation(76, 8);
				PushFollow(Follow._constant_in_term488);
				constant3=constant();
				PopFollow();
				if (state.failed) return;
				DebugLocation(76, 17);
				if (state.backtracking == 0)
				{
					value = (constant3!=null?input.ToString(constant3.Start,constant3.Stop):default(string));
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:77:8: set
				{
				DebugLocation(77, 8);
				PushFollow(Follow._set_in_term500);
				set();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FipaSL.g:78:8: sequence
				{
				DebugLocation(78, 8);
				PushFollow(Follow._sequence_in_term509);
				sequence();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FipaSL.g:79:8: functionalterm
				{
				DebugLocation(79, 8);
				PushFollow(Follow._functionalterm_in_term518);
				functionalterm();
				PopFollow();
				if (state.failed) return;
				DebugLocation(79, 23);
				if (state.backtracking == 0)
				{
					Console.WriteLine("FUNCTIONALTERM");
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FipaSL.g:80:8: actionexpression
				{
				DebugLocation(80, 8);
				PushFollow(Follow._actionexpression_in_term529);
				actionexpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// FipaSL.g:81:8: variableidentifier
				{
				DebugLocation(81, 8);
				PushFollow(Follow._variableidentifier_in_term538);
				variableidentifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("term", 10);
			LeaveRule("term", 10);
			LeaveRule_term();
	    }
	 	DebugLocation(81, 25);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actionexpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actionexpression() {}
	// $ANTLR start "actionexpression"
	// FipaSL.g:83:1: actionexpression : LPAREN ACTION WHITESPACE agent WHITESPACE functionalterm RPAREN ;
	[GrammarRule("actionexpression")]
	private ParserRuleReturnScope<IToken> actionexpression()
	{
		EnterRule_actionexpression();
		EnterRule("actionexpression", 11);
		TraceIn("actionexpression", 11);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

	    ParserRuleReturnScope<IToken> agent4 = default(ParserRuleReturnScope<IToken>);
	    ParserRuleReturnScope<IToken> functionalterm5 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "actionexpression");
		DebugLocation(83, 182);
		try
		{
			// FipaSL.g:83:18: ( LPAREN ACTION WHITESPACE agent WHITESPACE functionalterm RPAREN )
			DebugEnterAlt(1);
			// FipaSL.g:83:20: LPAREN ACTION WHITESPACE agent WHITESPACE functionalterm RPAREN
			{
			DebugLocation(83, 20);
			Match(input,LPAREN,Follow._LPAREN_in_actionexpression546); if (state.failed) return retval;
			DebugLocation(83, 27);
			Match(input,ACTION,Follow._ACTION_in_actionexpression548); if (state.failed) return retval;
			DebugLocation(83, 34);
			if (state.backtracking == 0)
			{
				isAction = true;
			}
			DebugLocation(83, 53);
			Match(input,WHITESPACE,Follow._WHITESPACE_in_actionexpression552); if (state.failed) return retval;
			DebugLocation(83, 64);
			PushFollow(Follow._agent_in_actionexpression554);
			agent4=agent();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(83, 70);
			if (state.backtracking == 0)
			{
				performer = (agent4!=null?input.ToString(agent4.Start,agent4.Stop):default(string));
			}
			DebugLocation(83, 97);
			Match(input,WHITESPACE,Follow._WHITESPACE_in_actionexpression558); if (state.failed) return retval;
			DebugLocation(83, 108);
			PushFollow(Follow._functionalterm_in_actionexpression560);
			functionalterm5=functionalterm();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(83, 123);
			if (state.backtracking == 0)
			{
				Console.WriteLine("TERM :" + (functionalterm5!=null?input.ToString(functionalterm5.Start,functionalterm5.Stop):default(string)));
			}
			DebugLocation(83, 177);
			Match(input,RPAREN,Follow._RPAREN_in_actionexpression564); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("actionexpression", 11);
			LeaveRule("actionexpression", 11);
			LeaveRule_actionexpression();
	    }
	 	DebugLocation(83, 182);
		} finally { DebugExitRule(GrammarFileName, "actionexpression"); }
		return retval;

	}
	// $ANTLR end "actionexpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functionalterm() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functionalterm() {}
	// $ANTLR start "functionalterm"
	// FipaSL.g:90:1: functionalterm : LPAREN functionsymbol ( WHITESPACE parameter )* RPAREN ;
	[GrammarRule("functionalterm")]
	private ParserRuleReturnScope<IToken> functionalterm()
	{
		EnterRule_functionalterm();
		EnterRule("functionalterm", 12);
		TraceIn("functionalterm", 12);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

	    ParserRuleReturnScope<IToken> functionsymbol6 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "functionalterm");
		DebugLocation(90, 106);
		try
		{
			// FipaSL.g:90:16: ( LPAREN functionsymbol ( WHITESPACE parameter )* RPAREN )
			DebugEnterAlt(1);
			// FipaSL.g:90:18: LPAREN functionsymbol ( WHITESPACE parameter )* RPAREN
			{
			DebugLocation(90, 18);
			Match(input,LPAREN,Follow._LPAREN_in_functionalterm575); if (state.failed) return retval;
			DebugLocation(90, 25);
			PushFollow(Follow._functionsymbol_in_functionalterm577);
			functionsymbol6=functionsymbol();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(90, 40);
			if (state.backtracking == 0)
			{
				actionName = (functionsymbol6!=null?input.ToString(functionsymbol6.Start,functionsymbol6.Stop):default(string));
			}
			DebugLocation(90, 77);
			// FipaSL.g:90:77: ( WHITESPACE parameter )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_1 = input.LA(1);

				if ((LA8_1==WHITESPACE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:90:78: WHITESPACE parameter
					{
					DebugLocation(90, 78);
					Match(input,WHITESPACE,Follow._WHITESPACE_in_functionalterm582); if (state.failed) return retval;
					DebugLocation(90, 89);
					PushFollow(Follow._parameter_in_functionalterm584);
					parameter();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(90, 101);
			Match(input,RPAREN,Follow._RPAREN_in_functionalterm588); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionalterm", 12);
			LeaveRule("functionalterm", 12);
			LeaveRule_functionalterm();
	    }
	 	DebugLocation(90, 106);
		} finally { DebugExitRule(GrammarFileName, "functionalterm"); }
		return retval;

	}
	// $ANTLR end "functionalterm"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parameter() {}
	// $ANTLR start "parameter"
	// FipaSL.g:92:1: parameter : parametername WHITESPACE parametervalue ;
	[GrammarRule("parameter")]
	private void parameter()
	{
		EnterRule_parameter();
		EnterRule("parameter", 13);
		TraceIn("parameter", 13);
	    ParserRuleReturnScope<IToken> parametervalue7 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "parameter");
		DebugLocation(92, 91);
		try
		{
			// FipaSL.g:92:11: ( parametername WHITESPACE parametervalue )
			DebugEnterAlt(1);
			// FipaSL.g:92:13: parametername WHITESPACE parametervalue
			{
			DebugLocation(92, 13);
			PushFollow(Follow._parametername_in_parameter596);
			parametername();
			PopFollow();
			if (state.failed) return;
			DebugLocation(92, 27);
			Match(input,WHITESPACE,Follow._WHITESPACE_in_parameter598); if (state.failed) return;
			DebugLocation(92, 38);
			PushFollow(Follow._parametervalue_in_parameter600);
			parametervalue7=parametervalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(92, 53);
			if (state.backtracking == 0)
			{
				paramValue.Add((parametervalue7!=null?input.ToString(parametervalue7.Start,parametervalue7.Stop):default(string)));
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameter", 13);
			LeaveRule("parameter", 13);
			LeaveRule_parameter();
	    }
	 	DebugLocation(92, 91);
		} finally { DebugExitRule(GrammarFileName, "parameter"); }
		return;

	}
	// $ANTLR end "parameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parametervalue() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parametervalue() {}
	// $ANTLR start "parametervalue"
	// FipaSL.g:94:1: parametervalue : term ;
	[GrammarRule("parametervalue")]
	private ParserRuleReturnScope<IToken> parametervalue()
	{
		EnterRule_parametervalue();
		EnterRule("parametervalue", 14);
		TraceIn("parametervalue", 14);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "parametervalue");
		DebugLocation(94, 21);
		try
		{
			// FipaSL.g:94:16: ( term )
			DebugEnterAlt(1);
			// FipaSL.g:94:18: term
			{
			DebugLocation(94, 18);
			PushFollow(Follow._term_in_parametervalue610);
			term();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parametervalue", 14);
			LeaveRule("parametervalue", 14);
			LeaveRule_parametervalue();
	    }
	 	DebugLocation(94, 21);
		} finally { DebugExitRule(GrammarFileName, "parametervalue"); }
		return retval;

	}
	// $ANTLR end "parametervalue"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agent() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agent() {}
	// $ANTLR start "agent"
	// FipaSL.g:96:1: agent : term ;
	[GrammarRule("agent")]
	private ParserRuleReturnScope<IToken> agent()
	{
		EnterRule_agent();
		EnterRule("agent", 15);
		TraceIn("agent", 15);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "agent");
		DebugLocation(96, 12);
		try
		{
			// FipaSL.g:96:7: ( term )
			DebugEnterAlt(1);
			// FipaSL.g:96:9: term
			{
			DebugLocation(96, 9);
			PushFollow(Follow._term_in_agent618);
			term();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("agent", 15);
			LeaveRule("agent", 15);
			LeaveRule_agent();
	    }
	 	DebugLocation(96, 12);
		} finally { DebugExitRule(GrammarFileName, "agent"); }
		return retval;

	}
	// $ANTLR end "agent"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functionsymbol() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functionsymbol() {}
	// $ANTLR start "functionsymbol"
	// FipaSL.g:98:1: functionsymbol : string ;
	[GrammarRule("functionsymbol")]
	private ParserRuleReturnScope<IToken> functionsymbol()
	{
		EnterRule_functionsymbol();
		EnterRule("functionsymbol", 16);
		TraceIn("functionsymbol", 16);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "functionsymbol");
		DebugLocation(98, 23);
		try
		{
			// FipaSL.g:98:16: ( string )
			DebugEnterAlt(1);
			// FipaSL.g:98:18: string
			{
			DebugLocation(98, 18);
			PushFollow(Follow._string_in_functionsymbol626);
			@string();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionsymbol", 16);
			LeaveRule("functionsymbol", 16);
			LeaveRule_functionsymbol();
	    }
	 	DebugLocation(98, 23);
		} finally { DebugExitRule(GrammarFileName, "functionsymbol"); }
		return retval;

	}
	// $ANTLR end "functionsymbol"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_propositionsymbol() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_propositionsymbol() {}
	// $ANTLR start "propositionsymbol"
	// FipaSL.g:100:1: propositionsymbol : string ;
	[GrammarRule("propositionsymbol")]
	private void propositionsymbol()
	{
		EnterRule_propositionsymbol();
		EnterRule("propositionsymbol", 17);
		TraceIn("propositionsymbol", 17);
		try { DebugEnterRule(GrammarFileName, "propositionsymbol");
		DebugLocation(100, 26);
		try
		{
			// FipaSL.g:100:19: ( string )
			DebugEnterAlt(1);
			// FipaSL.g:100:21: string
			{
			DebugLocation(100, 21);
			PushFollow(Follow._string_in_propositionsymbol634);
			@string();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propositionsymbol", 17);
			LeaveRule("propositionsymbol", 17);
			LeaveRule_propositionsymbol();
	    }
	 	DebugLocation(100, 26);
		} finally { DebugExitRule(GrammarFileName, "propositionsymbol"); }
		return;

	}
	// $ANTLR end "propositionsymbol"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_predicatesymbol() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_predicatesymbol() {}
	// $ANTLR start "predicatesymbol"
	// FipaSL.g:102:1: predicatesymbol : string ;
	[GrammarRule("predicatesymbol")]
	private void predicatesymbol()
	{
		EnterRule_predicatesymbol();
		EnterRule("predicatesymbol", 18);
		TraceIn("predicatesymbol", 18);
		try { DebugEnterRule(GrammarFileName, "predicatesymbol");
		DebugLocation(102, 24);
		try
		{
			// FipaSL.g:102:17: ( string )
			DebugEnterAlt(1);
			// FipaSL.g:102:19: string
			{
			DebugLocation(102, 19);
			PushFollow(Follow._string_in_predicatesymbol642);
			@string();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("predicatesymbol", 18);
			LeaveRule("predicatesymbol", 18);
			LeaveRule_predicatesymbol();
	    }
	 	DebugLocation(102, 24);
		} finally { DebugExitRule(GrammarFileName, "predicatesymbol"); }
		return;

	}
	// $ANTLR end "predicatesymbol"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant() {}
	// $ANTLR start "constant"
	// FipaSL.g:104:1: constant : ( numericalconstant | string );
	[GrammarRule("constant")]
	private ParserRuleReturnScope<IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 19);
		TraceIn("constant", 19);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(104, 17);
		try
		{
			// FipaSL.g:104:10: ( numericalconstant | string )
			int alt9=2;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_1 = input.LA(1);

			if ((LA9_1==DIGIT))
			{
				alt9 = 1;
			}
			else if ((LA9_1==ALPHA))
			{
				alt9 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:104:12: numericalconstant
				{
				DebugLocation(104, 12);
				PushFollow(Follow._numericalconstant_in_constant650);
				numericalconstant();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:105:12: string
				{
				DebugLocation(105, 12);
				PushFollow(Follow._string_in_constant663);
				@string();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constant", 19);
			LeaveRule("constant", 19);
			LeaveRule_constant();
	    }
	 	DebugLocation(105, 17);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set() {}
	// $ANTLR start "set"
	// FipaSL.g:107:1: set : LPAREN SET ( WHITESPACE term )* RPAREN ;
	[GrammarRule("set")]
	private void set()
	{
		EnterRule_set();
		EnterRule("set", 20);
		TraceIn("set", 20);
		try { DebugEnterRule(GrammarFileName, "set");
		DebugLocation(107, 42);
		try
		{
			// FipaSL.g:107:5: ( LPAREN SET ( WHITESPACE term )* RPAREN )
			DebugEnterAlt(1);
			// FipaSL.g:107:7: LPAREN SET ( WHITESPACE term )* RPAREN
			{
			DebugLocation(107, 7);
			Match(input,LPAREN,Follow._LPAREN_in_set671); if (state.failed) return;
			DebugLocation(107, 14);
			Match(input,SET,Follow._SET_in_set673); if (state.failed) return;
			DebugLocation(107, 18);
			// FipaSL.g:107:18: ( WHITESPACE term )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
				int LA10_1 = input.LA(1);

				if ((LA10_1==WHITESPACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:107:19: WHITESPACE term
					{
					DebugLocation(107, 19);
					Match(input,WHITESPACE,Follow._WHITESPACE_in_set676); if (state.failed) return;
					DebugLocation(107, 30);
					PushFollow(Follow._term_in_set678);
					term();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(107, 37);
			Match(input,RPAREN,Follow._RPAREN_in_set682); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("set", 20);
			LeaveRule("set", 20);
			LeaveRule_set();
	    }
	 	DebugLocation(107, 42);
		} finally { DebugExitRule(GrammarFileName, "set"); }
		return;

	}
	// $ANTLR end "set"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sequence() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sequence() {}
	// $ANTLR start "sequence"
	// FipaSL.g:109:1: sequence : LPAREN SEQUENCE ( WHITESPACE term )* RPAREN ;
	[GrammarRule("sequence")]
	private void sequence()
	{
		EnterRule_sequence();
		EnterRule("sequence", 21);
		TraceIn("sequence", 21);
		try { DebugEnterRule(GrammarFileName, "sequence");
		DebugLocation(109, 52);
		try
		{
			// FipaSL.g:109:10: ( LPAREN SEQUENCE ( WHITESPACE term )* RPAREN )
			DebugEnterAlt(1);
			// FipaSL.g:109:12: LPAREN SEQUENCE ( WHITESPACE term )* RPAREN
			{
			DebugLocation(109, 12);
			Match(input,LPAREN,Follow._LPAREN_in_sequence690); if (state.failed) return;
			DebugLocation(109, 19);
			Match(input,SEQUENCE,Follow._SEQUENCE_in_sequence692); if (state.failed) return;
			DebugLocation(109, 28);
			// FipaSL.g:109:28: ( WHITESPACE term )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_1 = input.LA(1);

				if ((LA11_1==WHITESPACE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:109:29: WHITESPACE term
					{
					DebugLocation(109, 29);
					Match(input,WHITESPACE,Follow._WHITESPACE_in_sequence695); if (state.failed) return;
					DebugLocation(109, 40);
					PushFollow(Follow._term_in_sequence697);
					term();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(109, 47);
			Match(input,RPAREN,Follow._RPAREN_in_sequence701); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("sequence", 21);
			LeaveRule("sequence", 21);
			LeaveRule_sequence();
	    }
	 	DebugLocation(109, 52);
		} finally { DebugExitRule(GrammarFileName, "sequence"); }
		return;

	}
	// $ANTLR end "sequence"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_numericalconstant() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_numericalconstant() {}
	// $ANTLR start "numericalconstant"
	// FipaSL.g:111:1: numericalconstant : ( integer | float );
	[GrammarRule("numericalconstant")]
	private void numericalconstant()
	{
		EnterRule_numericalconstant();
		EnterRule("numericalconstant", 22);
		TraceIn("numericalconstant", 22);
		try { DebugEnterRule(GrammarFileName, "numericalconstant");
		DebugLocation(111, 25);
		try
		{
			// FipaSL.g:111:19: ( integer | float )
			int alt12=2;
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_1 = input.LA(1);

			if ((LA12_1==DIGIT))
			{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred24_FipaSL_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// FipaSL.g:111:21: integer
				{
				DebugLocation(111, 21);
				PushFollow(Follow._integer_in_numericalconstant709);
				integer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FipaSL.g:112:21: float
				{
				DebugLocation(112, 21);
				PushFollow(Follow._float_in_numericalconstant731);
				@float();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericalconstant", 22);
			LeaveRule("numericalconstant", 22);
			LeaveRule_numericalconstant();
	    }
	 	DebugLocation(112, 25);
		} finally { DebugExitRule(GrammarFileName, "numericalconstant"); }
		return;

	}
	// $ANTLR end "numericalconstant"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parametername() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parametername() {}
	// $ANTLR start "parametername"
	// FipaSL.g:114:1: parametername : COLON string ;
	[GrammarRule("parametername")]
	private void parametername()
	{
		EnterRule_parametername();
		EnterRule("parametername", 23);
		TraceIn("parametername", 23);
	    ParserRuleReturnScope<IToken> string8 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "parametername");
		DebugLocation(114, 60);
		try
		{
			// FipaSL.g:114:15: ( COLON string )
			DebugEnterAlt(1);
			// FipaSL.g:114:17: COLON string
			{
			DebugLocation(114, 17);
			Match(input,COLON,Follow._COLON_in_parametername739); if (state.failed) return;
			DebugLocation(114, 23);
			PushFollow(Follow._string_in_parametername741);
			string8=@string();
			PopFollow();
			if (state.failed) return;
			DebugLocation(114, 31);
			if (state.backtracking == 0)
			{
				paramName.Add((string8!=null?input.ToString(string8.Start,string8.Stop):default(string)));
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parametername", 23);
			LeaveRule("parametername", 23);
			LeaveRule_parametername();
	    }
	 	DebugLocation(114, 60);
		} finally { DebugExitRule(GrammarFileName, "parametername"); }
		return;

	}
	// $ANTLR end "parametername"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variableidentifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variableidentifier() {}
	// $ANTLR start "variableidentifier"
	// FipaSL.g:116:1: variableidentifier : QUESTION agentname= string DOT value= string ;
	[GrammarRule("variableidentifier")]
	private void variableidentifier()
	{
		EnterRule_variableidentifier();
		EnterRule("variableidentifier", 24);
		TraceIn("variableidentifier", 24);
	    ParserRuleReturnScope<IToken> agentname = default(ParserRuleReturnScope<IToken>);
	    ParserRuleReturnScope<IToken> value = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "variableidentifier");
		DebugLocation(116, 121);
		try
		{
			// FipaSL.g:116:20: ( QUESTION agentname= string DOT value= string )
			DebugEnterAlt(1);
			// FipaSL.g:116:22: QUESTION agentname= string DOT value= string
			{
			DebugLocation(116, 22);
			Match(input,QUESTION,Follow._QUESTION_in_variableidentifier752); if (state.failed) return;
			DebugLocation(116, 40);
			PushFollow(Follow._string_in_variableidentifier756);
			agentname=@string();
			PopFollow();
			if (state.failed) return;
			DebugLocation(116, 48);
			if (state.backtracking == 0)
			{
				entityName = (agentname!=null?input.ToString(agentname.Start,agentname.Stop):default(string));
			}
			DebugLocation(116, 80);
			Match(input,DOT,Follow._DOT_in_variableidentifier760); if (state.failed) return;
			DebugLocation(116, 89);
			PushFollow(Follow._string_in_variableidentifier764);
			value=@string();
			PopFollow();
			if (state.failed) return;
			DebugLocation(116, 97);
			if (state.backtracking == 0)
			{
				variable = (value!=null?input.ToString(value.Start,value.Stop):default(string));
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableidentifier", 24);
			LeaveRule("variableidentifier", 24);
			LeaveRule_variableidentifier();
	    }
	 	DebugLocation(116, 121);
		} finally { DebugExitRule(GrammarFileName, "variableidentifier"); }
		return;

	}
	// $ANTLR end "variableidentifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}
	// $ANTLR start "string"
	// FipaSL.g:118:1: string : word ;
	[GrammarRule("string")]
	private ParserRuleReturnScope<IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 25);
		TraceIn("string", 25);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(118, 13);
		try
		{
			// FipaSL.g:118:8: ( word )
			DebugEnterAlt(1);
			// FipaSL.g:118:10: word
			{
			DebugLocation(118, 10);
			PushFollow(Follow._word_in_string774);
			word();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("string", 25);
			LeaveRule("string", 25);
			LeaveRule_string();
	    }
	 	DebugLocation(118, 13);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_stringliteral() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_stringliteral() {}
	// $ANTLR start "stringliteral"
	// FipaSL.g:120:1: stringliteral : GUILL ( ALPHA | DIGIT )* GUILL ;
	[GrammarRule("stringliteral")]
	private void stringliteral()
	{
		EnterRule_stringliteral();
		EnterRule("stringliteral", 26);
		TraceIn("stringliteral", 26);
		try { DebugEnterRule(GrammarFileName, "stringliteral");
		DebugLocation(120, 42);
		try
		{
			// FipaSL.g:120:15: ( GUILL ( ALPHA | DIGIT )* GUILL )
			DebugEnterAlt(1);
			// FipaSL.g:120:17: GUILL ( ALPHA | DIGIT )* GUILL
			{
			DebugLocation(120, 17);
			Match(input,GUILL,Follow._GUILL_in_stringliteral782); if (state.failed) return;
			DebugLocation(120, 23);
			// FipaSL.g:120:23: ( ALPHA | DIGIT )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_1 = input.LA(1);

				if ((LA13_1==ALPHA||LA13_1==DIGIT))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:
					{
					DebugLocation(120, 23);
					if (input.LA(1)==ALPHA||input.LA(1)==DIGIT)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(120, 38);
			Match(input,GUILL,Follow._GUILL_in_stringliteral791); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringliteral", 26);
			LeaveRule("stringliteral", 26);
			LeaveRule_stringliteral();
	    }
	 	DebugLocation(120, 42);
		} finally { DebugExitRule(GrammarFileName, "stringliteral"); }
		return;

	}
	// $ANTLR end "stringliteral"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_word() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_word() {}
	// $ANTLR start "word"
	// FipaSL.g:122:1: word : ALPHA ( ALPHA )* ;
	[GrammarRule("word")]
	private void word()
	{
		EnterRule_word();
		EnterRule("word", 27);
		TraceIn("word", 27);
		try { DebugEnterRule(GrammarFileName, "word");
		DebugLocation(122, 20);
		try
		{
			// FipaSL.g:122:6: ( ALPHA ( ALPHA )* )
			DebugEnterAlt(1);
			// FipaSL.g:122:8: ALPHA ( ALPHA )*
			{
			DebugLocation(122, 8);
			Match(input,ALPHA,Follow._ALPHA_in_word799); if (state.failed) return;
			DebugLocation(122, 13);
			// FipaSL.g:122:13: ( ALPHA )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_1 = input.LA(1);

				if ((LA14_1==ALPHA))
				{
					int LA14_2 = input.LA(2);

					if ((EvaluatePredicate(synpred27_FipaSL_fragment)))
					{
						alt14 = 1;
					}


				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:122:14: ALPHA
					{
					DebugLocation(122, 14);
					Match(input,ALPHA,Follow._ALPHA_in_word801); if (state.failed) return;

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("word", 27);
			LeaveRule("word", 27);
			LeaveRule_word();
	    }
	 	DebugLocation(122, 20);
		} finally { DebugExitRule(GrammarFileName, "word"); }
		return;

	}
	// $ANTLR end "word"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_integer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_integer() {}
	// $ANTLR start "integer"
	// FipaSL.g:124:1: integer : ( DIGIT )+ ;
	[GrammarRule("integer")]
	private void integer()
	{
		EnterRule_integer();
		EnterRule("integer", 28);
		TraceIn("integer", 28);
		try { DebugEnterRule(GrammarFileName, "integer");
		DebugLocation(124, 16);
		try
		{
			// FipaSL.g:124:9: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// FipaSL.g:124:11: ( DIGIT )+
			{
			DebugLocation(124, 11);
			// FipaSL.g:124:11: ( DIGIT )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_1 = input.LA(1);

				if ((LA15_1==DIGIT))
				{
					int LA15_2 = input.LA(2);

					if ((EvaluatePredicate(synpred28_FipaSL_fragment)))
					{
						alt15 = 1;
					}


				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:124:11: DIGIT
					{
					DebugLocation(124, 11);
					Match(input,DIGIT,Follow._DIGIT_in_integer811); if (state.failed) return;

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("integer", 28);
			LeaveRule("integer", 28);
			LeaveRule_integer();
	    }
	 	DebugLocation(124, 16);
		} finally { DebugExitRule(GrammarFileName, "integer"); }
		return;

	}
	// $ANTLR end "integer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_float() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_float() {}
	// $ANTLR start "float"
	// FipaSL.g:126:1: float : ( DIGIT )+ '.' ( DIGIT )+ ;
	[GrammarRule("float")]
	private void @float()
	{
		EnterRule_float();
		EnterRule("float", 29);
		TraceIn("float", 29);
		try { DebugEnterRule(GrammarFileName, "float");
		DebugLocation(126, 23);
		try
		{
			// FipaSL.g:126:7: ( ( DIGIT )+ '.' ( DIGIT )+ )
			DebugEnterAlt(1);
			// FipaSL.g:126:9: ( DIGIT )+ '.' ( DIGIT )+
			{
			DebugLocation(126, 9);
			// FipaSL.g:126:9: ( DIGIT )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_1 = input.LA(1);

				if ((LA16_1==DIGIT))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:126:9: DIGIT
					{
					DebugLocation(126, 9);
					Match(input,DIGIT,Follow._DIGIT_in_float820); if (state.failed) return;

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(126, 15);
			Match(input,DOT,Follow._DOT_in_float822); if (state.failed) return;
			DebugLocation(126, 18);
			// FipaSL.g:126:18: ( DIGIT )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_1 = input.LA(1);

				if ((LA17_1==DIGIT))
				{
					int LA17_2 = input.LA(2);

					if ((EvaluatePredicate(synpred30_FipaSL_fragment)))
					{
						alt17 = 1;
					}


				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// FipaSL.g:126:18: DIGIT
					{
					DebugLocation(126, 18);
					Match(input,DIGIT,Follow._DIGIT_in_float823); if (state.failed) return;

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("float", 29);
			LeaveRule("float", 29);
			LeaveRule_float();
	    }
	 	DebugLocation(126, 23);
		} finally { DebugExitRule(GrammarFileName, "float"); }
		return;

	}
	// $ANTLR end "float"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred24_FipaSL_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred24_FipaSL_fragment() {}

	// $ANTLR start synpred24_FipaSL
	private void synpred24_FipaSL_fragment()
	{
		EnterRule_synpred24_FipaSL_fragment();
		EnterRule("synpred24_FipaSL_fragment", 53);
		TraceIn("synpred24_FipaSL_fragment", 53);
		try
		{
			// FipaSL.g:111:21: ( integer )
			DebugEnterAlt(1);
			// FipaSL.g:111:21: integer
			{
			DebugLocation(111, 21);
			PushFollow(Follow._integer_in_synpred24_FipaSL709);
			integer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_FipaSL_fragment", 53);
			LeaveRule("synpred24_FipaSL_fragment", 53);
			LeaveRule_synpred24_FipaSL_fragment();
		}
	}
	// $ANTLR end synpred24_FipaSL
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred27_FipaSL_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred27_FipaSL_fragment() {}

	// $ANTLR start synpred27_FipaSL
	private void synpred27_FipaSL_fragment()
	{
		EnterRule_synpred27_FipaSL_fragment();
		EnterRule("synpred27_FipaSL_fragment", 56);
		TraceIn("synpred27_FipaSL_fragment", 56);
		try
		{
			// FipaSL.g:122:14: ( ALPHA )
			DebugEnterAlt(1);
			// FipaSL.g:122:14: ALPHA
			{
			DebugLocation(122, 14);
			Match(input,ALPHA,Follow._ALPHA_in_synpred27_FipaSL801); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_FipaSL_fragment", 56);
			LeaveRule("synpred27_FipaSL_fragment", 56);
			LeaveRule_synpred27_FipaSL_fragment();
		}
	}
	// $ANTLR end synpred27_FipaSL
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred28_FipaSL_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred28_FipaSL_fragment() {}

	// $ANTLR start synpred28_FipaSL
	private void synpred28_FipaSL_fragment()
	{
		EnterRule_synpred28_FipaSL_fragment();
		EnterRule("synpred28_FipaSL_fragment", 57);
		TraceIn("synpred28_FipaSL_fragment", 57);
		try
		{
			// FipaSL.g:124:11: ( DIGIT )
			DebugEnterAlt(1);
			// FipaSL.g:124:11: DIGIT
			{
			DebugLocation(124, 11);
			Match(input,DIGIT,Follow._DIGIT_in_synpred28_FipaSL811); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred28_FipaSL_fragment", 57);
			LeaveRule("synpred28_FipaSL_fragment", 57);
			LeaveRule_synpred28_FipaSL_fragment();
		}
	}
	// $ANTLR end synpred28_FipaSL
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred30_FipaSL_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred30_FipaSL_fragment() {}

	// $ANTLR start synpred30_FipaSL
	private void synpred30_FipaSL_fragment()
	{
		EnterRule_synpred30_FipaSL_fragment();
		EnterRule("synpred30_FipaSL_fragment", 59);
		TraceIn("synpred30_FipaSL_fragment", 59);
		try
		{
			// FipaSL.g:126:18: ( DIGIT )
			DebugEnterAlt(1);
			// FipaSL.g:126:18: DIGIT
			{
			DebugLocation(126, 18);
			Match(input,DIGIT,Follow._DIGIT_in_synpred30_FipaSL823); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_FipaSL_fragment", 59);
			LeaveRule("synpred30_FipaSL_fragment", 59);
			LeaveRule_synpred30_FipaSL_fragment();
		}
	}
	// $ANTLR end synpred30_FipaSL
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _LPAREN_in_content170 = new BitSet(new ulong[]{0x10048020UL});
		public static readonly BitSet _contentexpression_in_content172 = new BitSet(new ulong[]{0x11048020UL});
		public static readonly BitSet _RPAREN_in_content176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionexpression_in_contentexpression185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proposition_in_contentexpression209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _wff_in_proposition217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_wff225 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _unarylogicalop_in_wff227 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_wff229 = new BitSet(new ulong[]{0x10048020UL});
		public static readonly BitSet _wff_in_wff232 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RPAREN_in_wff235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_wff243 = new BitSet(new ulong[]{0x200040UL});
		public static readonly BitSet _binarylogicalop_in_wff245 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_wff247 = new BitSet(new ulong[]{0x10048020UL});
		public static readonly BitSet _wff_in_wff249 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_wff251 = new BitSet(new ulong[]{0x10048020UL});
		public static readonly BitSet _wff_in_wff253 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RPAREN_in_wff255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_wff263 = new BitSet(new ulong[]{0x8011000UL});
		public static readonly BitSet _actionop_in_wff265 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_wff267 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _actionexpression_in_wff269 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RPAREN_in_wff271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomicformula_in_wff279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unarylogicalop288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_T_in_atomicformula324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_T_in_atomicformula342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_atomicformula360 = new BitSet(new ulong[]{0x804000UL});
		public static readonly BitSet _binarytermop_in_atomicformula362 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _term_in_atomicformula364 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_atomicformula366 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _term_in_atomicformula368 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RPAREN_in_atomicformula370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_atomicformula388 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _predicatesymbol_in_atomicformula390 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_atomicformula392 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _term_in_atomicformula394 = new BitSet(new ulong[]{0x1440820UL});
		public static readonly BitSet _RPAREN_in_atomicformula397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propositionsymbol_in_atomicformula415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DONE_in_actionop450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FEASIBLE_in_actionop465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STARTED_in_actionop478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_term488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_term500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_in_term509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionalterm_in_term518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionexpression_in_term529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableidentifier_in_term538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_actionexpression546 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_actionexpression548 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_actionexpression552 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _agent_in_actionexpression554 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_actionexpression558 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _functionalterm_in_actionexpression560 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RPAREN_in_actionexpression564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_functionalterm575 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _functionsymbol_in_functionalterm577 = new BitSet(new ulong[]{0x21000000UL});
		public static readonly BitSet _WHITESPACE_in_functionalterm582 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _parameter_in_functionalterm584 = new BitSet(new ulong[]{0x21000000UL});
		public static readonly BitSet _RPAREN_in_functionalterm588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parametername_in_parameter596 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _WHITESPACE_in_parameter598 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _parametervalue_in_parameter600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_parametervalue610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_agent618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_functionsymbol626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_propositionsymbol634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_predicatesymbol642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericalconstant_in_constant650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_constant663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_set671 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _SET_in_set673 = new BitSet(new ulong[]{0x21000000UL});
		public static readonly BitSet _WHITESPACE_in_set676 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _term_in_set678 = new BitSet(new ulong[]{0x21000000UL});
		public static readonly BitSet _RPAREN_in_set682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_sequence690 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SEQUENCE_in_sequence692 = new BitSet(new ulong[]{0x21000000UL});
		public static readonly BitSet _WHITESPACE_in_sequence695 = new BitSet(new ulong[]{0x440820UL});
		public static readonly BitSet _term_in_sequence697 = new BitSet(new ulong[]{0x21000000UL});
		public static readonly BitSet _RPAREN_in_sequence701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _integer_in_numericalconstant709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _float_in_numericalconstant731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_parametername739 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _string_in_parametername741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_variableidentifier752 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _string_in_variableidentifier756 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _DOT_in_variableidentifier760 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _string_in_variableidentifier764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _word_in_string774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GUILL_in_stringliteral782 = new BitSet(new ulong[]{0x20820UL});
		public static readonly BitSet _GUILL_in_stringliteral791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALPHA_in_word799 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _ALPHA_in_word801 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _DIGIT_in_integer811 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _DIGIT_in_float820 = new BitSet(new ulong[]{0x2800UL});
		public static readonly BitSet _DOT_in_float822 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _DIGIT_in_float823 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _integer_in_synpred24_FipaSL709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALPHA_in_synpred27_FipaSL801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIGIT_in_synpred28_FipaSL811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIGIT_in_synpred30_FipaSL823 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
