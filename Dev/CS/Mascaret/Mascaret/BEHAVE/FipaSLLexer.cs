//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 FipaSL.g 2013-12-24 10:18:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
//[System.CLSCompliant(false)]
public partial class FipaSLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ACTION=4;
	public const int ALPHA=5;
	public const int AND=6;
	public const int ANYCHAR=7;
	public const int BELIEF=8;
	public const int COLON=9;
	public const int DIESE=10;
	public const int DIGIT=11;
	public const int DONE=12;
	public const int DOT=13;
	public const int EQUAL=14;
	public const int FALSE_T=15;
	public const int FEASIBLE=16;
	public const int GUILL=17;
	public const int LPAREN=18;
	public const int NOT=19;
	public const int NUMBER=20;
	public const int OR=21;
	public const int QUESTION=22;
	public const int RESULT=23;
	public const int RPAREN=24;
	public const int SEQUENCE=25;
	public const int SET=26;
	public const int STARTED=27;
	public const int TRUE_T=28;
	public const int WHITESPACE=29;

    // delegates
    // delegators

	public FipaSLLexer()
	{
		OnCreated();
	}

	public FipaSLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public FipaSLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "FipaSL.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BELIEF() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BELIEF() {}

    // $ANTLR start "BELIEF"
    [GrammarRule("BELIEF")]
    private void mBELIEF()
    {
    	EnterRule_BELIEF();
    	EnterRule("BELIEF", 1);
    	TraceIn("BELIEF", 1);
    		try
    		{
    		int _type = BELIEF;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:7:8: ( 'B' )
    		DebugEnterAlt(1);
    		// FipaSL.g:7:10: 'B'
    		{
    		DebugLocation(7, 10);
    		Match('B'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BELIEF", 1);
    		LeaveRule("BELIEF", 1);
    		LeaveRule_BELIEF();
        }
    }
    // $ANTLR end "BELIEF"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COLON() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COLON() {}

    // $ANTLR start "COLON"
    [GrammarRule("COLON")]
    private void mCOLON()
    {
    	EnterRule_COLON();
    	EnterRule("COLON", 2);
    	TraceIn("COLON", 2);
    		try
    		{
    		int _type = COLON;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:8:7: ( ':' )
    		DebugEnterAlt(1);
    		// FipaSL.g:8:9: ':'
    		{
    		DebugLocation(8, 9);
    		Match(':'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COLON", 2);
    		LeaveRule("COLON", 2);
    		LeaveRule_COLON();
        }
    }
    // $ANTLR end "COLON"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIESE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIESE() {}

    // $ANTLR start "DIESE"
    [GrammarRule("DIESE")]
    private void mDIESE()
    {
    	EnterRule_DIESE();
    	EnterRule("DIESE", 3);
    	TraceIn("DIESE", 3);
    		try
    		{
    		int _type = DIESE;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:9:7: ( '#' )
    		DebugEnterAlt(1);
    		// FipaSL.g:9:9: '#'
    		{
    		DebugLocation(9, 9);
    		Match('#'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DIESE", 3);
    		LeaveRule("DIESE", 3);
    		LeaveRule_DIESE();
        }
    }
    // $ANTLR end "DIESE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DOT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DOT() {}

    // $ANTLR start "DOT"
    [GrammarRule("DOT")]
    private void mDOT()
    {
    	EnterRule_DOT();
    	EnterRule("DOT", 4);
    	TraceIn("DOT", 4);
    		try
    		{
    		int _type = DOT;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:10:5: ( '.' )
    		DebugEnterAlt(1);
    		// FipaSL.g:10:7: '.'
    		{
    		DebugLocation(10, 7);
    		Match('.'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DOT", 4);
    		LeaveRule("DOT", 4);
    		LeaveRule_DOT();
        }
    }
    // $ANTLR end "DOT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EQUAL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EQUAL() {}

    // $ANTLR start "EQUAL"
    [GrammarRule("EQUAL")]
    private void mEQUAL()
    {
    	EnterRule_EQUAL();
    	EnterRule("EQUAL", 5);
    	TraceIn("EQUAL", 5);
    		try
    		{
    		int _type = EQUAL;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:11:7: ( '=' )
    		DebugEnterAlt(1);
    		// FipaSL.g:11:9: '='
    		{
    		DebugLocation(11, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EQUAL", 5);
    		LeaveRule("EQUAL", 5);
    		LeaveRule_EQUAL();
        }
    }
    // $ANTLR end "EQUAL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_GUILL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_GUILL() {}

    // $ANTLR start "GUILL"
    [GrammarRule("GUILL")]
    private void mGUILL()
    {
    	EnterRule_GUILL();
    	EnterRule("GUILL", 6);
    	TraceIn("GUILL", 6);
    		try
    		{
    		int _type = GUILL;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:12:7: ( '\"' )
    		DebugEnterAlt(1);
    		// FipaSL.g:12:9: '\"'
    		{
    		DebugLocation(12, 9);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("GUILL", 6);
    		LeaveRule("GUILL", 6);
    		LeaveRule_GUILL();
        }
    }
    // $ANTLR end "GUILL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LPAREN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LPAREN() {}

    // $ANTLR start "LPAREN"
    [GrammarRule("LPAREN")]
    private void mLPAREN()
    {
    	EnterRule_LPAREN();
    	EnterRule("LPAREN", 7);
    	TraceIn("LPAREN", 7);
    		try
    		{
    		int _type = LPAREN;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:13:8: ( '(' )
    		DebugEnterAlt(1);
    		// FipaSL.g:13:10: '('
    		{
    		DebugLocation(13, 10);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LPAREN", 7);
    		LeaveRule("LPAREN", 7);
    		LeaveRule_LPAREN();
        }
    }
    // $ANTLR end "LPAREN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_QUESTION() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_QUESTION() {}

    // $ANTLR start "QUESTION"
    [GrammarRule("QUESTION")]
    private void mQUESTION()
    {
    	EnterRule_QUESTION();
    	EnterRule("QUESTION", 8);
    	TraceIn("QUESTION", 8);
    		try
    		{
    		int _type = QUESTION;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:14:10: ( '?' )
    		DebugEnterAlt(1);
    		// FipaSL.g:14:12: '?'
    		{
    		DebugLocation(14, 12);
    		Match('?'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("QUESTION", 8);
    		LeaveRule("QUESTION", 8);
    		LeaveRule_QUESTION();
        }
    }
    // $ANTLR end "QUESTION"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_RPAREN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_RPAREN() {}

    // $ANTLR start "RPAREN"
    [GrammarRule("RPAREN")]
    private void mRPAREN()
    {
    	EnterRule_RPAREN();
    	EnterRule("RPAREN", 9);
    	TraceIn("RPAREN", 9);
    		try
    		{
    		int _type = RPAREN;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:15:8: ( ')' )
    		DebugEnterAlt(1);
    		// FipaSL.g:15:10: ')'
    		{
    		DebugLocation(15, 10);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("RPAREN", 9);
    		LeaveRule("RPAREN", 9);
    		LeaveRule_RPAREN();
        }
    }
    // $ANTLR end "RPAREN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NUMBER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NUMBER() {}

    // $ANTLR start "NUMBER"
    [GrammarRule("NUMBER")]
    private void mNUMBER()
    {
    	EnterRule_NUMBER();
    	EnterRule("NUMBER", 10);
    	TraceIn("NUMBER", 10);
    		try
    		{
    		int _type = NUMBER;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:132:9: ( ( DIGIT )+ )
    		DebugEnterAlt(1);
    		// FipaSL.g:132:11: ( DIGIT )+
    		{
    		DebugLocation(132, 11);
    		// FipaSL.g:132:11: ( DIGIT )+
    		int cnt1=0;
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if (((LA1_1>='0' && LA1_1<='9')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch (alt1)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// FipaSL.g:
    				{
    				DebugLocation(132, 11);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt1 >= 1)
    					goto loop1;

    				EarlyExitException eee1 = new EarlyExitException( 1, input );
    				DebugRecognitionException(eee1);
    				throw eee1;
    			}
    			cnt1++;
    		}
    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NUMBER", 10);
    		LeaveRule("NUMBER", 10);
    		LeaveRule_NUMBER();
        }
    }
    // $ANTLR end "NUMBER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WHITESPACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WHITESPACE() {}

    // $ANTLR start "WHITESPACE"
    [GrammarRule("WHITESPACE")]
    private void mWHITESPACE()
    {
    	EnterRule_WHITESPACE();
    	EnterRule("WHITESPACE", 11);
    	TraceIn("WHITESPACE", 11);
    		try
    		{
    		int _type = WHITESPACE;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:134:12: ( ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+ )
    		DebugEnterAlt(1);
    		// FipaSL.g:134:14: ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+
    		{
    		DebugLocation(134, 14);
    		// FipaSL.g:134:14: ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if (((LA2_1>='\t' && LA2_1<='\n')||(LA2_1>='\f' && LA2_1<='\r')||LA2_1==' '))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// FipaSL.g:
    				{
    				DebugLocation(134, 14);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WHITESPACE", 11);
    		LeaveRule("WHITESPACE", 11);
    		LeaveRule_WHITESPACE();
        }
    }
    // $ANTLR end "WHITESPACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIGIT() {}

    // $ANTLR start "DIGIT"
    [GrammarRule("DIGIT")]
    private void mDIGIT()
    {
    	EnterRule_DIGIT();
    	EnterRule("DIGIT", 12);
    	TraceIn("DIGIT", 12);
    		try
    		{
    		// FipaSL.g:136:17: ( '0' .. '9' )
    		DebugEnterAlt(1);
    		// FipaSL.g:
    		{
    		DebugLocation(136, 17);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("DIGIT", 12);
    		LeaveRule("DIGIT", 12);
    		LeaveRule_DIGIT();
        }
    }
    // $ANTLR end "DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ALPHA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ALPHA() {}

    // $ANTLR start "ALPHA"
    [GrammarRule("ALPHA")]
    private void mALPHA()
    {
    	EnterRule_ALPHA();
    	EnterRule("ALPHA", 13);
    	TraceIn("ALPHA", 13);
    		try
    		{
    		// FipaSL.g:137:17: ( 'a' .. 'z' | 'A' .. 'Z' )
    		DebugEnterAlt(1);
    		// FipaSL.g:
    		{
    		DebugLocation(137, 17);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("ALPHA", 13);
    		LeaveRule("ALPHA", 13);
    		LeaveRule_ALPHA();
        }
    }
    // $ANTLR end "ALPHA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ACTION() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ACTION() {}

    // $ANTLR start "ACTION"
    [GrammarRule("ACTION")]
    private void mACTION()
    {
    	EnterRule_ACTION();
    	EnterRule("ACTION", 14);
    	TraceIn("ACTION", 14);
    		try
    		{
    		int _type = ACTION;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:139:12: ( 'action' )
    		DebugEnterAlt(1);
    		// FipaSL.g:139:14: 'action'
    		{
    		DebugLocation(139, 14);
    		Match("action"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ACTION", 14);
    		LeaveRule("ACTION", 14);
    		LeaveRule_ACTION();
        }
    }
    // $ANTLR end "ACTION"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_RESULT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_RESULT() {}

    // $ANTLR start "RESULT"
    [GrammarRule("RESULT")]
    private void mRESULT()
    {
    	EnterRule_RESULT();
    	EnterRule("RESULT", 15);
    	TraceIn("RESULT", 15);
    		try
    		{
    		int _type = RESULT;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:140:12: ( 'result' )
    		DebugEnterAlt(1);
    		// FipaSL.g:140:14: 'result'
    		{
    		DebugLocation(140, 14);
    		Match("result"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("RESULT", 15);
    		LeaveRule("RESULT", 15);
    		LeaveRule_RESULT();
        }
    }
    // $ANTLR end "RESULT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TRUE_T() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TRUE_T() {}

    // $ANTLR start "TRUE_T"
    [GrammarRule("TRUE_T")]
    private void mTRUE_T()
    {
    	EnterRule_TRUE_T();
    	EnterRule("TRUE_T", 16);
    	TraceIn("TRUE_T", 16);
    		try
    		{
    		int _type = TRUE_T;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:141:12: ( 'true' )
    		DebugEnterAlt(1);
    		// FipaSL.g:141:14: 'true'
    		{
    		DebugLocation(141, 14);
    		Match("true"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TRUE_T", 16);
    		LeaveRule("TRUE_T", 16);
    		LeaveRule_TRUE_T();
        }
    }
    // $ANTLR end "TRUE_T"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FALSE_T() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FALSE_T() {}

    // $ANTLR start "FALSE_T"
    [GrammarRule("FALSE_T")]
    private void mFALSE_T()
    {
    	EnterRule_FALSE_T();
    	EnterRule("FALSE_T", 17);
    	TraceIn("FALSE_T", 17);
    		try
    		{
    		int _type = FALSE_T;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:142:12: ( 'false' )
    		DebugEnterAlt(1);
    		// FipaSL.g:142:14: 'false'
    		{
    		DebugLocation(142, 14);
    		Match("false"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FALSE_T", 17);
    		LeaveRule("FALSE_T", 17);
    		LeaveRule_FALSE_T();
        }
    }
    // $ANTLR end "FALSE_T"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DONE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DONE() {}

    // $ANTLR start "DONE"
    [GrammarRule("DONE")]
    private void mDONE()
    {
    	EnterRule_DONE();
    	EnterRule("DONE", 18);
    	TraceIn("DONE", 18);
    		try
    		{
    		int _type = DONE;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:143:12: ( 'done' )
    		DebugEnterAlt(1);
    		// FipaSL.g:143:14: 'done'
    		{
    		DebugLocation(143, 14);
    		Match("done"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DONE", 18);
    		LeaveRule("DONE", 18);
    		LeaveRule_DONE();
        }
    }
    // $ANTLR end "DONE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FEASIBLE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FEASIBLE() {}

    // $ANTLR start "FEASIBLE"
    [GrammarRule("FEASIBLE")]
    private void mFEASIBLE()
    {
    	EnterRule_FEASIBLE();
    	EnterRule("FEASIBLE", 19);
    	TraceIn("FEASIBLE", 19);
    		try
    		{
    		int _type = FEASIBLE;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:144:12: ( 'feasible' )
    		DebugEnterAlt(1);
    		// FipaSL.g:144:14: 'feasible'
    		{
    		DebugLocation(144, 14);
    		Match("feasible"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FEASIBLE", 19);
    		LeaveRule("FEASIBLE", 19);
    		LeaveRule_FEASIBLE();
        }
    }
    // $ANTLR end "FEASIBLE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STARTED() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STARTED() {}

    // $ANTLR start "STARTED"
    [GrammarRule("STARTED")]
    private void mSTARTED()
    {
    	EnterRule_STARTED();
    	EnterRule("STARTED", 20);
    	TraceIn("STARTED", 20);
    		try
    		{
    		int _type = STARTED;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:145:12: ( 'started' )
    		DebugEnterAlt(1);
    		// FipaSL.g:145:14: 'started'
    		{
    		DebugLocation(145, 14);
    		Match("started"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STARTED", 20);
    		LeaveRule("STARTED", 20);
    		LeaveRule_STARTED();
        }
    }
    // $ANTLR end "STARTED"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SET() {}

    // $ANTLR start "SET"
    [GrammarRule("SET")]
    private void mSET()
    {
    	EnterRule_SET();
    	EnterRule("SET", 21);
    	TraceIn("SET", 21);
    		try
    		{
    		int _type = SET;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:146:12: ( 'set' )
    		DebugEnterAlt(1);
    		// FipaSL.g:146:14: 'set'
    		{
    		DebugLocation(146, 14);
    		Match("set"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SET", 21);
    		LeaveRule("SET", 21);
    		LeaveRule_SET();
        }
    }
    // $ANTLR end "SET"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SEQUENCE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SEQUENCE() {}

    // $ANTLR start "SEQUENCE"
    [GrammarRule("SEQUENCE")]
    private void mSEQUENCE()
    {
    	EnterRule_SEQUENCE();
    	EnterRule("SEQUENCE", 22);
    	TraceIn("SEQUENCE", 22);
    		try
    		{
    		int _type = SEQUENCE;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:147:12: ( 'sequence' )
    		DebugEnterAlt(1);
    		// FipaSL.g:147:14: 'sequence'
    		{
    		DebugLocation(147, 14);
    		Match("sequence"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SEQUENCE", 22);
    		LeaveRule("SEQUENCE", 22);
    		LeaveRule_SEQUENCE();
        }
    }
    // $ANTLR end "SEQUENCE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOT() {}

    // $ANTLR start "NOT"
    [GrammarRule("NOT")]
    private void mNOT()
    {
    	EnterRule_NOT();
    	EnterRule("NOT", 23);
    	TraceIn("NOT", 23);
    		try
    		{
    		int _type = NOT;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:148:12: ( 'not' )
    		DebugEnterAlt(1);
    		// FipaSL.g:148:14: 'not'
    		{
    		DebugLocation(148, 14);
    		Match("not"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOT", 23);
    		LeaveRule("NOT", 23);
    		LeaveRule_NOT();
        }
    }
    // $ANTLR end "NOT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AND() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AND() {}

    // $ANTLR start "AND"
    [GrammarRule("AND")]
    private void mAND()
    {
    	EnterRule_AND();
    	EnterRule("AND", 24);
    	TraceIn("AND", 24);
    		try
    		{
    		int _type = AND;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:149:12: ( 'and' )
    		DebugEnterAlt(1);
    		// FipaSL.g:149:14: 'and'
    		{
    		DebugLocation(149, 14);
    		Match("and"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AND", 24);
    		LeaveRule("AND", 24);
    		LeaveRule_AND();
        }
    }
    // $ANTLR end "AND"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OR() {}

    // $ANTLR start "OR"
    [GrammarRule("OR")]
    private void mOR()
    {
    	EnterRule_OR();
    	EnterRule("OR", 25);
    	TraceIn("OR", 25);
    		try
    		{
    		int _type = OR;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:150:12: ( 'or' )
    		DebugEnterAlt(1);
    		// FipaSL.g:150:14: 'or'
    		{
    		DebugLocation(150, 14);
    		Match("or"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OR", 25);
    		LeaveRule("OR", 25);
    		LeaveRule_OR();
        }
    }
    // $ANTLR end "OR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ANYCHAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ANYCHAR() {}

    // $ANTLR start "ANYCHAR"
    [GrammarRule("ANYCHAR")]
    private void mANYCHAR()
    {
    	EnterRule_ANYCHAR();
    	EnterRule("ANYCHAR", 26);
    	TraceIn("ANYCHAR", 26);
    		try
    		{
    		int _type = ANYCHAR;
    		int _channel = DefaultTokenChannel;
    		// FipaSL.g:151:12: ( . )
    		DebugEnterAlt(1);
    		// FipaSL.g:151:14: .
    		{
    		DebugLocation(151, 14);
    		MatchAny(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ANYCHAR", 26);
    		LeaveRule("ANYCHAR", 26);
    		LeaveRule_ANYCHAR();
        }
    }
    // $ANTLR end "ANYCHAR"

    public override void mTokens()
    {
    	// FipaSL.g:1:8: ( BELIEF | COLON | DIESE | DOT | EQUAL | GUILL | LPAREN | QUESTION | RPAREN | NUMBER | WHITESPACE | ACTION | RESULT | TRUE_T | FALSE_T | DONE | FEASIBLE | STARTED | SET | SEQUENCE | NOT | AND | OR | ANYCHAR )
    	int alt3=24;
    	try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    	int LA3_1 = input.LA(1);

    	if ((LA3_1=='B'))
    	{
    		alt3 = 1;
    	}
    	else if ((LA3_1==':'))
    	{
    		alt3 = 2;
    	}
    	else if ((LA3_1=='#'))
    	{
    		alt3 = 3;
    	}
    	else if ((LA3_1=='.'))
    	{
    		alt3 = 4;
    	}
    	else if ((LA3_1=='='))
    	{
    		alt3 = 5;
    	}
    	else if ((LA3_1=='\"'))
    	{
    		alt3 = 6;
    	}
    	else if ((LA3_1=='('))
    	{
    		alt3 = 7;
    	}
    	else if ((LA3_1=='?'))
    	{
    		alt3 = 8;
    	}
    	else if ((LA3_1==')'))
    	{
    		alt3 = 9;
    	}
    	else if (((LA3_1>='0' && LA3_1<='9')))
    	{
    		alt3 = 10;
    	}
    	else if (((LA3_1>='\t' && LA3_1<='\n')||(LA3_1>='\f' && LA3_1<='\r')||LA3_1==' '))
    	{
    		alt3 = 11;
    	}
    	else if ((LA3_1=='a'))
    	{
    		switch (input.LA(2))
    		{
    		case 'c':
    			{
    			alt3 = 12;
    			}
    			break;
    		case 'n':
    			{
    			alt3 = 22;
    			}
    			break;
    		default:
    			alt3=24;
    			break;

    		}

    	}
    	else if ((LA3_1=='r'))
    	{
    		int LA3_2 = input.LA(2);

    		if ((LA3_2=='e'))
    		{
    			alt3 = 13;
    		}

    		else
    		{
    			alt3 = 24;
    		}

    	}
    	else if ((LA3_1=='t'))
    	{
    		int LA3_2 = input.LA(2);

    		if ((LA3_2=='r'))
    		{
    			alt3 = 14;
    		}

    		else
    		{
    			alt3 = 24;
    		}

    	}
    	else if ((LA3_1=='f'))
    	{
    		switch (input.LA(2))
    		{
    		case 'a':
    			{
    			alt3 = 15;
    			}
    			break;
    		case 'e':
    			{
    			alt3 = 17;
    			}
    			break;
    		default:
    			alt3=24;
    			break;

    		}

    	}
    	else if ((LA3_1=='d'))
    	{
    		int LA3_2 = input.LA(2);

    		if ((LA3_2=='o'))
    		{
    			alt3 = 16;
    		}

    		else
    		{
    			alt3 = 24;
    		}

    	}
    	else if ((LA3_1=='s'))
    	{
    		switch (input.LA(2))
    		{
    		case 't':
    			{
    			alt3 = 18;
    			}
    			break;
    		case 'e':
    			{
    			int LA3_3 = input.LA(3);

    			if ((LA3_3=='t'))
    			{
    				alt3 = 19;
    			}
    			else if ((LA3_3=='q'))
    			{
    				alt3 = 20;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 3, 40, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		default:
    			alt3=24;
    			break;

    		}

    	}
    	else if ((LA3_1=='n'))
    	{
    		int LA3_2 = input.LA(2);

    		if ((LA3_2=='o'))
    		{
    			alt3 = 21;
    		}

    		else
    		{
    			alt3 = 24;
    		}

    	}
    	else if ((LA3_1=='o'))
    	{
    		int LA3_2 = input.LA(2);

    		if ((LA3_2=='r'))
    		{
    			alt3 = 23;
    		}

    		else
    		{
    			alt3 = 24;
    		}

    	}
    	else if (((LA3_1>='\u0000' && LA3_1<='\b')||LA3_1=='\u000B'||(LA3_1>='\u000E' && LA3_1<='\u001F')||LA3_1=='!'||(LA3_1>='$' && LA3_1<='\'')||(LA3_1>='*' && LA3_1<='-')||LA3_1=='/'||(LA3_1>=';' && LA3_1<='<')||LA3_1=='>'||(LA3_1>='@' && LA3_1<='A')||(LA3_1>='C' && LA3_1<='`')||(LA3_1>='b' && LA3_1<='c')||LA3_1=='e'||(LA3_1>='g' && LA3_1<='m')||(LA3_1>='p' && LA3_1<='q')||(LA3_1>='u' && LA3_1<='\uFFFF')))
    	{
    		alt3 = 24;
    	}

    	else
    	{
    		NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
    		DebugRecognitionException(nvae);
    		throw nvae;
    	}

    	} finally { DebugExitDecision(3); }
    	switch (alt3)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// FipaSL.g:1:10: BELIEF
    		{
    		DebugLocation(1, 10);
    		mBELIEF(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// FipaSL.g:1:17: COLON
    		{
    		DebugLocation(1, 17);
    		mCOLON(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// FipaSL.g:1:23: DIESE
    		{
    		DebugLocation(1, 23);
    		mDIESE(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// FipaSL.g:1:29: DOT
    		{
    		DebugLocation(1, 29);
    		mDOT(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// FipaSL.g:1:33: EQUAL
    		{
    		DebugLocation(1, 33);
    		mEQUAL(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// FipaSL.g:1:39: GUILL
    		{
    		DebugLocation(1, 39);
    		mGUILL(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// FipaSL.g:1:45: LPAREN
    		{
    		DebugLocation(1, 45);
    		mLPAREN(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// FipaSL.g:1:52: QUESTION
    		{
    		DebugLocation(1, 52);
    		mQUESTION(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// FipaSL.g:1:61: RPAREN
    		{
    		DebugLocation(1, 61);
    		mRPAREN(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// FipaSL.g:1:68: NUMBER
    		{
    		DebugLocation(1, 68);
    		mNUMBER(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// FipaSL.g:1:75: WHITESPACE
    		{
    		DebugLocation(1, 75);
    		mWHITESPACE(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// FipaSL.g:1:86: ACTION
    		{
    		DebugLocation(1, 86);
    		mACTION(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// FipaSL.g:1:93: RESULT
    		{
    		DebugLocation(1, 93);
    		mRESULT(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// FipaSL.g:1:100: TRUE_T
    		{
    		DebugLocation(1, 100);
    		mTRUE_T(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// FipaSL.g:1:107: FALSE_T
    		{
    		DebugLocation(1, 107);
    		mFALSE_T(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// FipaSL.g:1:115: DONE
    		{
    		DebugLocation(1, 115);
    		mDONE(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// FipaSL.g:1:120: FEASIBLE
    		{
    		DebugLocation(1, 120);
    		mFEASIBLE(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// FipaSL.g:1:129: STARTED
    		{
    		DebugLocation(1, 129);
    		mSTARTED(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// FipaSL.g:1:137: SET
    		{
    		DebugLocation(1, 137);
    		mSET(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// FipaSL.g:1:141: SEQUENCE
    		{
    		DebugLocation(1, 141);
    		mSEQUENCE(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// FipaSL.g:1:150: NOT
    		{
    		DebugLocation(1, 150);
    		mNOT(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// FipaSL.g:1:154: AND
    		{
    		DebugLocation(1, 154);
    		mAND(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// FipaSL.g:1:158: OR
    		{
    		DebugLocation(1, 158);
    		mOR(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// FipaSL.g:1:161: ANYCHAR
    		{
    		DebugLocation(1, 161);
    		mANYCHAR(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
